{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"VSCode ROS2 Workspace Template This template will get you set up using ROS2 with VSCode as your IDE. See how I develop with vscode and ros2 for a more in-depth look on how to use this workspace. Features Style ROS2-approved formatters are included in the IDE. c++ uncrustify; config from ament_uncrustify python autopep8; vscode settings consistent with the style guide Tasks There are many pre-defined tasks, see .vscode/tasks.json for a complete listing. Feel free to adjust them to suit your needs. Take a look at how I develop using tasks for an idea on how I use tasks in my development. Debugging This template sets up debugging for python files and gdb for cpp programs. See .vscode/launch.json for configuration details. Continuous Integration The template also comes with basic continuous integration set up. See .github/workflows/ros.yaml . To remove a linter just delete it's name from this line: matrix: linter: [cppcheck, cpplint, uncrustify, lint_cmake, xmllint, flake8, pep257] How to use this template Prerequisites You should already have Docker and VSCode with the remote containers plugin installed on your system. docker vscode vscode remote containers plugin Get the template Click on \"use this template\" Create your repository On the next dialog, name the repository you would like to start and decide if you want all of the branches, or just the latest LTS: Foxy. Github will then create a new repository with the contents of this one in your account. It grabs the latest changes as \"initial commit\". Clone your repo Now you can clone your repo as normal Open it in vscode Now that you've cloned your repo onto your computer, you can open it in VSCode (File->Open Folder). When you open it for the first time, you should see a little popup that asks you if you would like to open it in a container. Say yes! If you don't see the pop-up, click on the little green square in the bottom left corner, which should bring up the container dialog In the dialog, select \"Remote Containers: Reopen in container\" VSCode will build the dockerfile inside of .devcontainer for you. If you open a terminal inside VSCode (Terminal->New Terminal), you should see that your username has been changed to ros , and the bottom left green corner should say \"Dev Container\" Update the template with your code Specify the repositories you want to include in your workspace in src/ros2.repos or delete src/ros2.repos and develop directly within the workspace. If you are using a ros2.repos file, import the contents Terminal->Run Task..->import from workspace file Install dependencies Terminal->Run Task..->install dependencies Develop!","title":"VSCode ROS2 Workspace Template"},{"location":"#vscode-ros2-workspace-template","text":"This template will get you set up using ROS2 with VSCode as your IDE. See how I develop with vscode and ros2 for a more in-depth look on how to use this workspace.","title":"VSCode ROS2 Workspace Template"},{"location":"#features","text":"","title":"Features"},{"location":"#style","text":"ROS2-approved formatters are included in the IDE. c++ uncrustify; config from ament_uncrustify python autopep8; vscode settings consistent with the style guide","title":"Style"},{"location":"#tasks","text":"There are many pre-defined tasks, see .vscode/tasks.json for a complete listing. Feel free to adjust them to suit your needs. Take a look at how I develop using tasks for an idea on how I use tasks in my development.","title":"Tasks"},{"location":"#debugging","text":"This template sets up debugging for python files and gdb for cpp programs. See .vscode/launch.json for configuration details.","title":"Debugging"},{"location":"#continuous-integration","text":"The template also comes with basic continuous integration set up. See .github/workflows/ros.yaml . To remove a linter just delete it's name from this line: matrix: linter: [cppcheck, cpplint, uncrustify, lint_cmake, xmllint, flake8, pep257]","title":"Continuous Integration"},{"location":"#how-to-use-this-template","text":"","title":"How to use this template"},{"location":"#prerequisites","text":"You should already have Docker and VSCode with the remote containers plugin installed on your system. docker vscode vscode remote containers plugin","title":"Prerequisites"},{"location":"#get-the-template","text":"Click on \"use this template\"","title":"Get the template"},{"location":"#create-your-repository","text":"On the next dialog, name the repository you would like to start and decide if you want all of the branches, or just the latest LTS: Foxy. Github will then create a new repository with the contents of this one in your account. It grabs the latest changes as \"initial commit\".","title":"Create your repository"},{"location":"#clone-your-repo","text":"Now you can clone your repo as normal","title":"Clone your repo"},{"location":"#open-it-in-vscode","text":"Now that you've cloned your repo onto your computer, you can open it in VSCode (File->Open Folder). When you open it for the first time, you should see a little popup that asks you if you would like to open it in a container. Say yes! If you don't see the pop-up, click on the little green square in the bottom left corner, which should bring up the container dialog In the dialog, select \"Remote Containers: Reopen in container\" VSCode will build the dockerfile inside of .devcontainer for you. If you open a terminal inside VSCode (Terminal->New Terminal), you should see that your username has been changed to ros , and the bottom left green corner should say \"Dev Container\"","title":"Open it in vscode"},{"location":"#update-the-template-with-your-code","text":"Specify the repositories you want to include in your workspace in src/ros2.repos or delete src/ros2.repos and develop directly within the workspace. If you are using a ros2.repos file, import the contents Terminal->Run Task..->import from workspace file Install dependencies Terminal->Run Task..->install dependencies Develop!","title":"Update the template with your code"}]}